
week11.out:

[0;90m------------------------------------------------------------
[0m[0;90mStarting Test 1

[0m   > Select the test you want to run:
   > 	0. To compare all the sorting algorithms
   > 	1. Bubble Sort
   > 	2. Selection Sort
   > 	3. Insertion Sort
   > 	4. Binary Sort
   > 	5. Heap Sort
   > 	6. Merge Sort
   > 	7. Quick Sort
   > > [4m1
[0m   > Bubble Sort
   > 	Before:	889, 192, 528, 675, 154, 746, 562, 482, 448, 842,
   > 		929, 330, 615, 225, 785, 577, 606, 426, 311, 867,
   > 		773, 775, 190, 414, 155, 771, 499, 337, 298, 242,
   > 		656, 188, 334, 184, 815, 388, 831, 429, 823, 331,
   > 		323, 752, 613, 838, 877, 398, 415, 535, 776, 679,
   > 		455, 602, 454, 545, 916, 561, 369, 467, 851, 567,
   > 		609, 507, 707, 844, 643, 522, 284, 526, 903, 107,
   > 		809, 227, 759, 474, 965, 689, 825, 433, 224, 601,
   > 		112, 631, 255, 518, 177, 224, 131, 446, 591, 882,
   > 		913, 201, 441, 673, 997, 137, 195, 281, 563, 151
   > 
   > 	After:	107, 112, 131, 137, 151, 154, 155, 177, 184, 188,
   > 		190, 192, 195, 201, 224, 224, 225, 227, 242, 255,
   > 		281, 284, 298, 311, 323, 330, 331, 334, 337, 369,
   > 		388, 398, 414, 415, 426, 429, 433, 441, 446, 448,
   > 		454, 455, 467, 474, 482, 499, 507, 518, 522, 526,
   > 		528, 535, 545, 561, 562, 563, 567, 577, 591, 601,
   > 		602, 606, 609, 613, 615, 631, 643, 656, 673, 675,
   > 		679, 689, 707, 746, 752, 759, 771, 773, 775, 776,
   > 		785, 809, 815, 823, 825, 831, 838, 842, 844, 851,
   > 		867, 877, 882, 889, 903, 913, 916, 929, 965, 997
   > The array is sorted
[1;92m
Test 1 passed.
[0m[0;90m------------------------------------------------------------

[0m[0;90m------------------------------------------------------------
[0m[0;90mStarting Test 2

[0m   > Select the test you want to run:
   > 	0. To compare all the sorting algorithms
   > 	1. Bubble Sort
   > 	2. Selection Sort
   > 	3. Insertion Sort
   > 	4. Binary Sort
   > 	5. Heap Sort
   > 	6. Merge Sort
   > 	7. Quick Sort
   > > [4m2
[0m   > Selection Sort
   > 	Before:	889, 192, 528, 675, 154, 746, 562, 482, 448, 842,
   > 		929, 330, 615, 225, 785, 577, 606, 426, 311, 867,
   > 		773, 775, 190, 414, 155, 771, 499, 337, 298, 242,
   > 		656, 188, 334, 184, 815, 388, 831, 429, 823, 331,
   > 		323, 752, 613, 838, 877, 398, 415, 535, 776, 679,
   > 		455, 602, 454, 545, 916, 561, 369, 467, 851, 567,
   > 		609, 507, 707, 844, 643, 522, 284, 526, 903, 107,
   > 		809, 227, 759, 474, 965, 689, 825, 433, 224, 601,
   > 		112, 631, 255, 518, 177, 224, 131, 446, 591, 882,
   > 		913, 201, 441, 673, 997, 137, 195, 281, 563, 151
   > 
   > 	After:	107, 112, 131, 137, 151, 154, 155, 177, 184, 188,
   > 		190, 192, 195, 201, 224, 224, 225, 227, 242, 255,
   > 		281, 284, 298, 311, 323, 330, 331, 334, 337, 369,
   > 		388, 398, 414, 415, 426, 429, 433, 441, 446, 448,
   > 		454, 455, 467, 474, 482, 499, 507, 518, 522, 526,
   > 		528, 535, 545, 561, 562, 563, 567, 577, 591, 601,
   > 		602, 606, 609, 613, 615, 631, 643, 656, 673, 675,
   > 		679, 689, 707, 746, 752, 759, 771, 773, 775, 776,
   > 		785, 809, 815, 823, 825, 831, 838, 842, 844, 851,
   > 		867, 877, 882, 889, 903, 913, 916, 929, 965, 997
   > The array is sorted
[1;92m
Test 2 passed.
[0m[0;90m------------------------------------------------------------

[0m[0;90m------------------------------------------------------------
[0m[0;90mStarting Test 3

[0m   > Select the test you want to run:
   > 	0. To compare all the sorting algorithms
   > 	1. Bubble Sort
   > 	2. Selection Sort
   > 	3. Insertion Sort
   > 	4. Binary Sort
   > 	5. Heap Sort
   > 	6. Merge Sort
   > 	7. Quick Sort
   > > [4m3
[0m   > Insertion Sort
   > 	Before:	889, 192, 528, 675, 154, 746, 562, 482, 448, 842,
   > 		929, 330, 615, 225, 785, 577, 606, 426, 311, 867,
   > 		773, 775, 190, 414, 155, 771, 499, 337, 298, 242,
   > 		656, 188, 334, 184, 815, 388, 831, 429, 823, 331,
   > 		323, 752, 613, 838, 877, 398, 415, 535, 776, 679,
   > 		455, 602, 454, 545, 916, 561, 369, 467, 851, 567,
   > 		609, 507, 707, 844, 643, 522, 284, 526, 903, 107,
   > 		809, 227, 759, 474, 965, 689, 825, 433, 224, 601,
   > 		112, 631, 255, 518, 177, 224, 131, 446, 591, 882,
   > 		913, 201, 441, 673, 997, 137, 195, 281, 563, 151
   > 
   > 	After:	107, 112, 131, 137, 151, 154, 155, 177, 184, 188,
   > 		190, 192, 195, 201, 224, 224, 225, 227, 242, 255,
   > 		281, 284, 298, 311, 323, 330, 331, 334, 337, 369,
   > 		388, 398, 414, 415, 426, 429, 433, 441, 446, 448,
   > 		454, 455, 467, 474, 482, 499, 507, 518, 522, 526,
   > 		528, 535, 545, 561, 562, 563, 567, 577, 591, 601,
   > 		602, 606, 609, 613, 615, 631, 643, 656, 673, 675,
   > 		679, 689, 707, 746, 752, 759, 771, 773, 775, 776,
   > 		785, 809, 815, 823, 825, 831, 838, 842, 844, 851,
   > 		867, 877, 882, 889, 903, 913, 916, 929, 965, 997
   > The array is sorted
[1;92m
Test 3 passed.
[0m[0;90m------------------------------------------------------------

[0m[0;90m------------------------------------------------------------
[0m[0;90mStarting Test 4

[0m   > Select the test you want to run:
   > 	0. To compare all the sorting algorithms
   > 	1. Bubble Sort
   > 	2. Selection Sort
   > 	3. Insertion Sort
   > 	4. Binary Sort
   > 	5. Heap Sort
   > 	6. Merge Sort
   > 	7. Quick Sort
   > > [4m4
[0m   > Binary Sort
   > 	Before:	889, 192, 528, 675, 154, 746, 562, 482, 448, 842,
   > 		929, 330, 615, 225, 785, 577, 606, 426, 311, 867,
   > 		773, 775, 190, 414, 155, 771, 499, 337, 298, 242,
   > 		656, 188, 334, 184, 815, 388, 831, 429, 823, 331,
   > 		323, 752, 613, 838, 877, 398, 415, 535, 776, 679,
   > 		455, 602, 454, 545, 916, 561, 369, 467, 851, 567,
   > 		609, 507, 707, 844, 643, 522, 284, 526, 903, 107,
   > 		809, 227, 759, 474, 965, 689, 825, 433, 224, 601,
   > 		112, 631, 255, 518, 177, 224, 131, 446, 591, 882,
   > 		913, 201, 441, 673, 997, 137, 195, 281, 563, 151
   > 
   > 	After:	107, 112, 131, 137, 151, 154, 155, 177, 184, 188,
   > 		190, 192, 195, 201, 224, 224, 225, 227, 242, 255,
   > 		281, 284, 298, 311, 323, 330, 331, 334, 337, 369,
   > 		388, 398, 414, 415, 426, 429, 433, 441, 446, 448,
   > 		454, 455, 467, 474, 482, 499, 507, 518, 522, 526,
   > 		528, 535, 545, 561, 562, 563, 567, 577, 591, 601,
   > 		602, 606, 609, 613, 615, 631, 643, 656, 673, 675,
   > 		679, 689, 707, 746, 752, 759, 771, 773, 775, 776,
   > 		785, 809, 815, 823, 825, 831, 838, 842, 844, 851,
   > 		867, 877, 882, 889, 903, 913, 916, 929, 965, 997
   > The array is sorted
[1;92m
Test 4 passed.
[0m[0;90m------------------------------------------------------------

[0m[0;90m------------------------------------------------------------
[0m[0;90mStarting Test 5

[0m   > Select the test you want to run:
   > 	0. To compare all the sorting algorithms
   > 	1. Bubble Sort
   > 	2. Selection Sort
   > 	3. Insertion Sort
   > 	4. Binary Sort
   > 	5. Heap Sort
   > 	6. Merge Sort
   > 	7. Quick Sort
   > > [4m5
[0m   > Heap Sort
   > 	Before:	889, 192, 528, 675, 154, 746, 562, 482, 448, 842,
   > 		929, 330, 615, 225, 785, 577, 606, 426, 311, 867,
   > 		773, 775, 190, 414, 155, 771, 499, 337, 298, 242,
   > 		656, 188, 334, 184, 815, 388, 831, 429, 823, 331,
   > 		323, 752, 613, 838, 877, 398, 415, 535, 776, 679,
   > 		455, 602, 454, 545, 916, 561, 369, 467, 851, 567,
   > 		609, 507, 707, 844, 643, 522, 284, 526, 903, 107,
   > 		809, 227, 759, 474, 965, 689, 825, 433, 224, 601,
   > 		112, 631, 255, 518, 177, 224, 131, 446, 591, 882,
   > 		913, 201, 441, 673, 997, 137, 195, 281, 563, 151
   > 
   > 	After:	107, 112, 131, 137, 151, 154, 155, 177, 184, 188,
   > 		190, 192, 195, 201, 224, 224, 225, 227, 242, 255,
   > 		281, 284, 298, 311, 323, 330, 331, 334, 337, 369,
   > 		388, 398, 414, 415, 426, 429, 433, 441, 446, 448,
   > 		454, 455, 467, 474, 482, 499, 507, 518, 522, 526,
   > 		528, 535, 545, 561, 562, 563, 567, 577, 591, 601,
   > 		602, 606, 609, 613, 615, 631, 643, 656, 673, 675,
   > 		679, 689, 707, 746, 752, 759, 771, 773, 775, 776,
   > 		785, 809, 815, 823, 825, 831, 838, 842, 844, 851,
   > 		867, 877, 882, 889, 903, 913, 916, 929, 965, 997
   > The array is sorted
[1;92m
Test 5 passed.
[0m[0;90m------------------------------------------------------------

[0m[0;90m------------------------------------------------------------
[0m[0;90mStarting Test 6

[0m   > Select the test you want to run:
   > 	0. To compare all the sorting algorithms
   > 	1. Bubble Sort
   > 	2. Selection Sort
   > 	3. Insertion Sort
   > 	4. Binary Sort
   > 	5. Heap Sort
   > 	6. Merge Sort
   > 	7. Quick Sort
   > > [4m6
[0m   > Merge Sort
   > 	Before:	889, 192, 528, 675, 154, 746, 562, 482, 448, 842,
   > 		929, 330, 615, 225, 785, 577, 606, 426, 311, 867,
   > 		773, 775, 190, 414, 155, 771, 499, 337, 298, 242,
   > 		656, 188, 334, 184, 815, 388, 831, 429, 823, 331,
   > 		323, 752, 613, 838, 877, 398, 415, 535, 776, 679,
   > 		455, 602, 454, 545, 916, 561, 369, 467, 851, 567,
   > 		609, 507, 707, 844, 643, 522, 284, 526, 903, 107,
   > 		809, 227, 759, 474, 965, 689, 825, 433, 224, 601,
   > 		112, 631, 255, 518, 177, 224, 131, 446, 591, 882,
   > 		913, 201, 441, 673, 997, 137, 195, 281, 563, 151
   > 
   > 	After:	107, 112, 131, 137, 151, 154, 155, 177, 184, 188,
   > 		190, 192, 195, 201, 224, 224, 225, 227, 242, 255,
   > 		281, 284, 298, 311, 323, 330, 331, 334, 337, 369,
   > 		388, 398, 414, 415, 426, 429, 433, 441, 446, 448,
   > 		454, 455, 467, 474, 482, 499, 507, 518, 522, 526,
   > 		528, 535, 545, 561, 562, 563, 567, 577, 591, 601,
   > 		602, 606, 609, 613, 615, 631, 643, 656, 673, 675,
   > 		679, 689, 707, 746, 752, 759, 771, 773, 775, 776,
   > 		785, 809, 815, 823, 825, 831, 838, 842, 844, 851,
   > 		867, 877, 882, 889, 903, 913, 916, 929, 965, 997
   > The array is sorted
[1;92m
Test 6 passed.
[0m[0;90m------------------------------------------------------------

[0m[0;90m------------------------------------------------------------
[0m[0;90mStarting Test 7

[0m   > Select the test you want to run:
   > 	0. To compare all the sorting algorithms
   > 	1. Bubble Sort
   > 	2. Selection Sort
   > 	3. Insertion Sort
   > 	4. Binary Sort
   > 	5. Heap Sort
   > 	6. Merge Sort
   > 	7. Quick Sort
   > > [4m7
[0m   > Quick Sort
   > 	Before:	889, 192, 528, 675, 154, 746, 562, 482, 448, 842,
   > 		929, 330, 615, 225, 785, 577, 606, 426, 311, 867,
   > 		773, 775, 190, 414, 155, 771, 499, 337, 298, 242,
   > 		656, 188, 334, 184, 815, 388, 831, 429, 823, 331,
   > 		323, 752, 613, 838, 877, 398, 415, 535, 776, 679,
   > 		455, 602, 454, 545, 916, 561, 369, 467, 851, 567,
   > 		609, 507, 707, 844, 643, 522, 284, 526, 903, 107,
   > 		809, 227, 759, 474, 965, 689, 825, 433, 224, 601,
   > 		112, 631, 255, 518, 177, 224, 131, 446, 591, 882,
   > 		913, 201, 441, 673, 997, 137, 195, 281, 563, 151
   > 
   > 	After:	107, 112, 131, 137, 151, 154, 155, 177, 184, 188,
   > 		190, 192, 195, 201, 224, 224, 225, 227, 242, 255,
   > 		281, 284, 298, 311, 323, 330, 331, 334, 337, 369,
   > 		388, 398, 414, 415, 426, 429, 433, 441, 446, 448,
   > 		454, 455, 467, 474, 482, 499, 507, 518, 522, 526,
   > 		528, 535, 545, 561, 562, 563, 567, 577, 591, 601,
   > 		602, 606, 609, 613, 615, 631, 643, 656, 673, 675,
   > 		679, 689, 707, 746, 752, 759, 771, 773, 775, 776,
   > 		785, 809, 815, 823, 825, 831, 838, 842, 844, 851,
   > 		867, 877, 882, 889, 903, 913, 916, 929, 965, 997
   > The array is sorted
[1;92m
Test 7 passed.
[0m[0;90m------------------------------------------------------------

[0m[0;90m------------------------------------------------------------
[0m[0;90mStarting Test 8

[0m   > Select the test you want to run:
   > 	0. To compare all the sorting algorithms
   > 	1. Bubble Sort
   > 	2. Selection Sort
   > 	3. Insertion Sort
   > 	4. Binary Sort
   > 	5. Heap Sort
   > 	6. Merge Sort
   > 	7. Quick Sort
   > > [4m0
[0m   > How many items in the test (10000 - 40000 are good numbers)? [4m10000
[0m   > What type of test would you like to run?
   >    1. random numbers
   >    2. already sorted in ascending order
   >    3. already sorted in descending order
   >    4. almost sorted in ascending order
   >    5. random but with a small number of possible values
   > > [4m1
[0m[0;90m
[0m[0;90mRandom order. It should look something like this:
[0m[0;90m      Sort Name    Time       Assigns      Compares
[0m[0;90m ---------------+-------+-------------+-------------
[0m[0;90m    Bubble Sort |  0.74 |    74432037 |    49995000 <- big assign and compare
[0m[0;90m Selection Sort |  0.25 |       29982 |    49995000 <- big compare
[0m[0;90m Insertion Sort |  0.13 |    24830726 |      118919 <- big assign
[0m[0;90m    Binary Sort |  0.01 |       20000 |      154523 <- exactly 2,000 assign
[0m[0;90m      Heap Sort |  0.00 |      372762 |      237163
[0m[0;90m     Merge Sort |  0.01 |      138141 |      270454
[0m[0;90m     Quick Sort |  0.00 |      113475 |      184371
[0m[0;90m
[0m   >       Sort Name    Time       Assigns      Compares
   >  ---------------+-------+-------------+-------------
   >     Bubble Sort |  0.93 |    74432037 |    49995000
   >  Selection Sort |  0.31 |       29982 |    49995000
   >  Insertion Sort |  0.17 |    24830726 |      118919
   >     Binary Sort |  0.01 |       20000 |      154523
   >       Heap Sort |  0.00 |      372762 |      237163
   >      Merge Sort |  0.01 |      138141 |      270454
   >      Quick Sort |  0.00 |      113475 |      184371
[1;92m
Test 8 passed.
[0m[0;90m------------------------------------------------------------

[0m[0;90m------------------------------------------------------------
[0m[0;90mStarting Test 9

[0m   > Select the test you want to run:
   > 	0. To compare all the sorting algorithms
   > 	1. Bubble Sort
   > 	2. Selection Sort
   > 	3. Insertion Sort
   > 	4. Binary Sort
   > 	5. Heap Sort
   > 	6. Merge Sort
   > 	7. Quick Sort
   > > [4m0
[0m   > How many items in the test (10000 - 40000 are good numbers)? [4m10000
[0m   > What type of test would you like to run?
   >    1. random numbers
   >    2. already sorted in ascending order
   >    3. already sorted in descending order
   >    4. almost sorted in ascending order
   >    5. random but with a small number of possible values
   > > [4m2
[0m[0;90m
[0m[0;90mAscending order. It should look something like this:
[0m[0;90m      Sort Name    Time       Assigns      Compares
[0m[0;90m ---------------+-------+-------------+-------------
[0m[0;90m    Bubble Sort |  0.27 |           0 |    49995000 <- no assigns
[0m[0;90m Selection Sort |  0.24 |           0 |    49995000 <- no assigns
[0m[0;90m Insertion Sort |  0.00 |       19998 |      123617 <- small assigns
[0m[0;90m    Binary Sort |  0.23 |       20000 |    49995000 <- big compares
[0m[0;90m      Heap Sort |  0.00 |      395868 |      244560
[0m[0;90m     Merge Sort |  0.00 |       10000 |        9999
[0m[0;90m     Quick Sort |  0.01 |       39996 |      143615
[0m[0;90m
[0m   >       Sort Name    Time       Assigns      Compares
   >  ---------------+-------+-------------+-------------
   >     Bubble Sort |  0.34 |           0 |    49995000
   >  Selection Sort |  0.30 |           0 |    49995000
   >  Insertion Sort |  0.00 |       19998 |      123617
   >     Binary Sort |  0.29 |       20000 |    49995000
   >       Heap Sort |  0.01 |      395868 |      244560
   >      Merge Sort |  0.00 |       10000 |        9999
   >      Quick Sort |  0.00 |       39996 |      143615
[1;92m
Test 9 passed.
[0m[0;90m------------------------------------------------------------

[0m[0;90m------------------------------------------------------------
[0m[0;90mStarting Test 10

[0m   > Select the test you want to run:
   > 	0. To compare all the sorting algorithms
   > 	1. Bubble Sort
   > 	2. Selection Sort
   > 	3. Insertion Sort
   > 	4. Binary Sort
   > 	5. Heap Sort
   > 	6. Merge Sort
   > 	7. Quick Sort
   > > [4m0
[0m   > How many items in the test (10000 - 40000 are good numbers)? [4m10000
[0m   > What type of test would you like to run?
   >    1. random numbers
   >    2. already sorted in ascending order
   >    3. already sorted in descending order
   >    4. almost sorted in ascending order
   >    5. random but with a small number of possible values
   > > [4m3
[0m[0;90m
[0m[0;90mDescending order. It should look something like this:
[0m[0;90m      Sort Name    Time       Assigns      Compares
[0m[0;90m ---------------+-------+-------------+-------------
[0m[0;90m    Bubble Sort |  0.96 |   149985000 |    49995000 <- big assign and compare
[0m[0;90m Selection Sort |  0.25 |       15000 |    49995000 <- big compare
[0m[0;90m Insertion Sort |  0.28 |    50014998 |      113631 <- big assign
[0m[0;90m    Binary Sort |  0.22 |       20000 |    49995000 <- big compare 2000 assign
[0m[0;90m      Heap Sort |  0.01 |      350088 |      227607
[0m[0;90m     Merge Sort |  0.00 |      138160 |      205394
[0m[0;90m     Quick Sort |  0.00 |       54993 |      143614
[0m[0;90m
[0m   >       Sort Name    Time       Assigns      Compares
   >  ---------------+-------+-------------+-------------
   >     Bubble Sort |  1.21 |   149985000 |    49995000
   >  Selection Sort |  0.31 |       15000 |    49995000
   >  Insertion Sort |  0.35 |    50014998 |      113631
   >     Binary Sort |  0.29 |       20000 |    49995000
   >       Heap Sort |  0.00 |      350088 |      227607
   >      Merge Sort |  0.01 |      138160 |      205394
   >      Quick Sort |  0.00 |       54993 |      143614
[1;92m
Test 10 passed.
[0m[0;90m------------------------------------------------------------

[0m[1;92m
============================================================
[0m[1;92mPassed all tests with no errors.
[0m[1;92m============================================================

[0m